#include <Arduino.h>


#define POTENTIOMETER_PIN 33

#define DAC_CH1 25

#define pwm_pin1 32
#define pwm_pin2 26
#define pwm_pin3 27


// generat table using
// https://daycounter.com/Calculators/Sine-Generator-Calculator.phtml
#define Num_Samples 256  //  number of dample of signal
#define MaxWaveTypes 2   // types of wave (signal)

TaskHandle_t Task1;
TaskHandle_t Task2;

double sin1;
double sin2;
double sin3;

double tri;

double amplitude_sin = 1;
double amplitude_tri = 1;

double phase1 = 0;
double phase2 = Num_Samples / 3;
double phase3 = Num_Samples * 2 / 3;
double freq_sin = 0;
double freq_tri = 1;  // mellan 0 & 1

double ma = amplitude_sin / amplitude_tri;  // Amplitude modulation ratio!
// Vab = Va - Vb
// Vbc = Vb - Vc
// Vca = Vc - Va

int analogValue = 0;
int old_analogValue = 0;

unsigned long t_test1 = 0;  // for tests
unsigned long t_test2 = 0;  // for tests
int count1 = 0;             // for tests
int count2 = 0;             // for tests
boolean live1 = true;       // for tests
boolean live2 = true;       // for tests
double cycle1 = 0;

int t = 0;

static byte WaveFormTable[MaxWaveTypes][Num_Samples] = {
  // Sin wave
  { 0x80, 0x83, 0x86, 0x89, 0x8c, 0x8f, 0x92, 0x95, 0x98, 0x9c, 0x9f, 0xa2,
    0xa5, 0xa8, 0xab, 0xae, 0xb0, 0xb3, 0xb6, 0xb9, 0xbc, 0xbf, 0xc1, 0xc4,
    0xc7, 0xc9, 0xcc, 0xce, 0xd1, 0xd3, 0xd5, 0xd8, 0xda, 0xdc, 0xde, 0xe0,
    0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xeb, 0xed, 0xef, 0xf0, 0xf2, 0xf3, 0xf4,
    0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfb, 0xfc, 0xfd, 0xfd, 0xfe, 0xfe,
    0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfd, 0xfd,
    0xfc, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf2, 0xf1,
    0xef, 0xee, 0xec, 0xeb, 0xe9, 0xe7, 0xe5, 0xe3, 0xe1, 0xdf, 0xdd, 0xdb,
    0xd9, 0xd7, 0xd4, 0xd2, 0xcf, 0xcd, 0xca, 0xc8, 0xc5, 0xc3, 0xc0, 0xbd,
    0xba, 0xb8, 0xb5, 0xb2, 0xaf, 0xac, 0xa9, 0xa6, 0xa3, 0xa0, 0x9d, 0x9a,
    0x97, 0x94, 0x91, 0x8e, 0x8a, 0x87, 0x84, 0x81, 0x7e, 0x7b, 0x78, 0x75,
    0x71, 0x6e, 0x6b, 0x68, 0x65, 0x62, 0x5f, 0x5c, 0x59, 0x56, 0x53, 0x50,
    0x4d, 0x4a, 0x47, 0x45, 0x42, 0x3f, 0x3c, 0x3a, 0x37, 0x35, 0x32, 0x30,
    0x2d, 0x2b, 0x28, 0x26, 0x24, 0x22, 0x20, 0x1e, 0x1c, 0x1a, 0x18, 0x16,
    0x14, 0x13, 0x11, 0x10, 0xe,  0xd,  0xb,  0xa,  0x9,  0x8,  0x7,  0x6,
    0x5,  0x4,  0x3,  0x3,  0x2,  0x2,  0x1,  0x1,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x1,  0x1,  0x1,  0x2,  0x2,  0x3,  0x4,  0x4,  0x5,
    0x6,  0x7,  0x8,  0x9,  0xb,  0xc,  0xd,  0xf,  0x10, 0x12, 0x14, 0x15,
    0x17, 0x19, 0x1b, 0x1d, 0x1f, 0x21, 0x23, 0x25, 0x27, 0x2a, 0x2c, 0x2e,
    0x31, 0x33, 0x36, 0x38, 0x3b, 0x3e, 0x40, 0x43, 0x46, 0x49, 0x4c, 0x4f,
    0x51, 0x54, 0x57, 0x5a, 0x5d, 0x60, 0x63, 0x67, 0x6a, 0x6d, 0x70, 0x73,
    0x76, 0x79, 0x7c, 0x80
  },
  // Triangular wave table
  { 0x2,  0x4,  0x6,  0x8,  0xa,  0xc,  0xe,  0x10, 0x12, 0x14, 0x16, 0x18,
    0x1a, 0x1c, 0x1e, 0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30,
    0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e, 0x40, 0x42, 0x44, 0x46, 0x48,
    0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e, 0x60,
    0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78,
    0x7a, 0x7c, 0x7e, 0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90,
    0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e, 0xa0, 0xa2, 0xa4, 0xa6, 0xa8,
    0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe, 0xc0,
    0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8,
    0xda, 0xdc, 0xde, 0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0,
    0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe, 0xff, 0xfe, 0xfc, 0xfa, 0xf8,
    0xf6, 0xf4, 0xf2, 0xf0, 0xee, 0xec, 0xea, 0xe8, 0xe6, 0xe4, 0xe2, 0xe0,
    0xde, 0xdc, 0xda, 0xd8, 0xd6, 0xd4, 0xd2, 0xd0, 0xce, 0xcc, 0xca, 0xc8,
    0xc6, 0xc4, 0xc2, 0xc0, 0xbe, 0xbc, 0xba, 0xb8, 0xb6, 0xb4, 0xb2, 0xb0,
    0xae, 0xac, 0xaa, 0xa8, 0xa6, 0xa4, 0xa2, 0xa0, 0x9e, 0x9c, 0x9a, 0x98,
    0x96, 0x94, 0x92, 0x90, 0x8e, 0x8c, 0x8a, 0x88, 0x86, 0x84, 0x82, 0x80,
    0x7e, 0x7c, 0x7a, 0x78, 0x76, 0x74, 0x72, 0x70, 0x6e, 0x6c, 0x6a, 0x68,
    0x66, 0x64, 0x62, 0x60, 0x5e, 0x5c, 0x5a, 0x58, 0x56, 0x54, 0x52, 0x50,
    0x4e, 0x4c, 0x4a, 0x48, 0x46, 0x44, 0x42, 0x40, 0x3e, 0x3c, 0x3a, 0x38,
    0x36, 0x34, 0x32, 0x30, 0x2e, 0x2c, 0x2a, 0x28, 0x26, 0x24, 0x22, 0x20,
    0x1e, 0x1c, 0x1a, 0x18, 0x16, 0x14, 0x12, 0x10, 0xe,  0xc,  0xa,  0x8,
    0x6,  0x4,  0x2,  0x0
  }
};

void setup() {
  Serial.begin(115200);
  pinMode(pwm_pin1, OUTPUT);
  pinMode(pwm_pin2, OUTPUT);
  pinMode(pwm_pin3, OUTPUT);

  Serial.println("________________________");
  Serial.print("CPU freq: ");
  Serial.print(getCpuFrequencyMhz());
  Serial.println(" MHz");
  Serial.print("Abp freq: ");
  Serial.print(getApbFrequency() / 1000000);
  Serial.println(" MHz");
  Serial.println("________________________");

  xTaskCreatePinnedToCore(
    Task1code, /* Task function. */
    "Task1",   /* name of task. */
    10000,     /* Stack size of task */
    NULL,      /* parameter of the task */
    1,         /* priority of the task */
    &Task1,    /* Task handle to keep track of created task */
    0);        /* pin task to core 0 */
  delay(500);

  xTaskCreatePinnedToCore(
    Task2code, /* Task function. */
    "Task2",   /* name of task. */
    10000,     /* Stack size of task */
    NULL,      /* parameter of the task */
    1,         /* priority of the task */
    &Task2,    /* Task handle to keep track of created task */
    1);        /* pin task to core 1 */
  delay(500);
}

void Task1code(void* pvParameters) {
  Serial.print("Task1 running on core ");
  Serial.println(xPortGetCoreID());
  Serial.print("Task1: ");
  Serial.println("Waves + DigitaWrite");
  Serial.println("________________________");
  for (;;) {
    vTaskDelay(1);
    // i < 50000 is probebly stable
    for (uint16_t i = 0; i < 500; i++) {
      t ++;

      /*
        // test case for running 100 000 cycles
            if (t == 100000) {  // for tests
              t_test1 = millis();
            } else if (t == 200000) {
              t_test1 = millis() - t_test1;
              live1 = false;
            }

            if (!live1) {  // for tests
              Serial.println("________________________");
              Serial.print("delta t (ms) per 100000 cykler= ");
              Serial.println(t_test1);
              Serial.print("t per cycle (ms)= ");
              cycle1 = ((double)t_test1) / ((double)100000);
              Serial.println(cycle1);
              Serial.println("________________________");
              live1 = true;
            }
      */

      sin1 = sample_sin(t, amplitude_sin, freq_sin, phase1);
      sin2 = sample_sin(t, amplitude_sin, freq_sin, phase2);
      sin3 = sample_sin(t, amplitude_sin, freq_sin, phase3);

      tri = sample_tri(t, amplitude_tri, freq_tri);

      /*
            Serial.println("________________________");
            Serial.print(sin1);
            Serial.print(", ");
            Serial.print(sin2);
            Serial.print(", ");
            Serial.println(sin3);
            Serial.println(tri);
      */

      if (sin1 > tri) {
        digitalWrite(pwm_pin1, 1);
      } else {
        digitalWrite(pwm_pin1, 0);
      }

      if (sin2 > tri) {
        digitalWrite(pwm_pin2, 1);
      } else {
        digitalWrite(pwm_pin2, 0);
      }

      if (sin3 > tri) {
        digitalWrite(pwm_pin3, 1);
      } else {
        digitalWrite(pwm_pin3, 0);
      }
    }
  }
}

void Task2code(void* pvParameters) {
  Serial.print("Task2 running on core ");
  Serial.println(xPortGetCoreID());
  Serial.print("Task2: ");
  Serial.println("AnalogRead");
  Serial.println("________________________");
  for (;;) {
    vTaskDelay(10);
    analogValue = analogRead(POTENTIOMETER_PIN);

    if (analogValue < 200) {
      freq_sin = 0.000005 * 200;
    } else {
      freq_sin = 0.000005 * analogValue;
    }

    //Serial.print("sin freq: ");
    //Serial.println(freq_sin * 1000);
    vTaskDelay(1000);
  }
}

double sample_sin(int t, double amplitude, double freq, double phase) {
  t = (int)((t * freq) + phase) % 256;
  return WaveFormTable[0][(int)t] * amplitude;
}

double sample_tri(int t, double amplitude, double freq) {
  t = (int)(t * freq) % 256;
  return WaveFormTable[1][(int)t] * amplitude;
}

void loop() {
  vTaskDelay(portMAX_DELAY);
}
