#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include <fstream>
#include <iostream>
#include <string>

#define pi 3.14159265358979323846

#define Num_Samples 256  //  number of dample of signal
#define MaxWaveTypes 2   // types of wave (signal)

static unsigned char WaveFormTable[MaxWaveTypes][Num_Samples] = {
    // Sin wave
    {0x80, 0x83, 0x86, 0x89, 0x8c, 0x8f, 0x92, 0x95, 0x98, 0x9c, 0x9f, 0xa2,
     0xa5, 0xa8, 0xab, 0xae, 0xb0, 0xb3, 0xb6, 0xb9, 0xbc, 0xbf, 0xc1, 0xc4,
     0xc7, 0xc9, 0xcc, 0xce, 0xd1, 0xd3, 0xd5, 0xd8, 0xda, 0xdc, 0xde, 0xe0,
     0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xeb, 0xed, 0xef, 0xf0, 0xf2, 0xf3, 0xf4,
     0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfb, 0xfc, 0xfd, 0xfd, 0xfe, 0xfe,
     0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfd, 0xfd,
     0xfc, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf2, 0xf1,
     0xef, 0xee, 0xec, 0xeb, 0xe9, 0xe7, 0xe5, 0xe3, 0xe1, 0xdf, 0xdd, 0xdb,
     0xd9, 0xd7, 0xd4, 0xd2, 0xcf, 0xcd, 0xca, 0xc8, 0xc5, 0xc3, 0xc0, 0xbd,
     0xba, 0xb8, 0xb5, 0xb2, 0xaf, 0xac, 0xa9, 0xa6, 0xa3, 0xa0, 0x9d, 0x9a,
     0x97, 0x94, 0x91, 0x8e, 0x8a, 0x87, 0x84, 0x81, 0x7e, 0x7b, 0x78, 0x75,
     0x71, 0x6e, 0x6b, 0x68, 0x65, 0x62, 0x5f, 0x5c, 0x59, 0x56, 0x53, 0x50,
     0x4d, 0x4a, 0x47, 0x45, 0x42, 0x3f, 0x3c, 0x3a, 0x37, 0x35, 0x32, 0x30,
     0x2d, 0x2b, 0x28, 0x26, 0x24, 0x22, 0x20, 0x1e, 0x1c, 0x1a, 0x18, 0x16,
     0x14, 0x13, 0x11, 0x10, 0xe,  0xd,  0xb,  0xa,  0x9,  0x8,  0x7,  0x6,
     0x5,  0x4,  0x3,  0x3,  0x2,  0x2,  0x1,  0x1,  0x0,  0x0,  0x0,  0x0,
     0x0,  0x0,  0x0,  0x1,  0x1,  0x1,  0x2,  0x2,  0x3,  0x4,  0x4,  0x5,
     0x6,  0x7,  0x8,  0x9,  0xb,  0xc,  0xd,  0xf,  0x10, 0x12, 0x14, 0x15,
     0x17, 0x19, 0x1b, 0x1d, 0x1f, 0x21, 0x23, 0x25, 0x27, 0x2a, 0x2c, 0x2e,
     0x31, 0x33, 0x36, 0x38, 0x3b, 0x3e, 0x40, 0x43, 0x46, 0x49, 0x4c, 0x4f,
     0x51, 0x54, 0x57, 0x5a, 0x5d, 0x60, 0x63, 0x67, 0x6a, 0x6d, 0x70, 0x73,
     0x76, 0x79, 0x7c, 0x80},
    // Triangular wave table
    {0x2,  0x4,  0x6,  0x8,  0xa,  0xc,  0xe,  0x10, 0x12, 0x14, 0x16, 0x18,
     0x1a, 0x1c, 0x1e, 0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30,
     0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e, 0x40, 0x42, 0x44, 0x46, 0x48,
     0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e, 0x60,
     0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78,
     0x7a, 0x7c, 0x7e, 0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90,
     0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e, 0xa0, 0xa2, 0xa4, 0xa6, 0xa8,
     0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe, 0xc0,
     0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8,
     0xda, 0xdc, 0xde, 0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0,
     0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe, 0xff, 0xfe, 0xfc, 0xfa, 0xf8,
     0xf6, 0xf4, 0xf2, 0xf0, 0xee, 0xec, 0xea, 0xe8, 0xe6, 0xe4, 0xe2, 0xe0,
     0xde, 0xdc, 0xda, 0xd8, 0xd6, 0xd4, 0xd2, 0xd0, 0xce, 0xcc, 0xca, 0xc8,
     0xc6, 0xc4, 0xc2, 0xc0, 0xbe, 0xbc, 0xba, 0xb8, 0xb6, 0xb4, 0xb2, 0xb0,
     0xae, 0xac, 0xaa, 0xa8, 0xa6, 0xa4, 0xa2, 0xa0, 0x9e, 0x9c, 0x9a, 0x98,
     0x96, 0x94, 0x92, 0x90, 0x8e, 0x8c, 0x8a, 0x88, 0x86, 0x84, 0x82, 0x80,
     0x7e, 0x7c, 0x7a, 0x78, 0x76, 0x74, 0x72, 0x70, 0x6e, 0x6c, 0x6a, 0x68,
     0x66, 0x64, 0x62, 0x60, 0x5e, 0x5c, 0x5a, 0x58, 0x56, 0x54, 0x52, 0x50,
     0x4e, 0x4c, 0x4a, 0x48, 0x46, 0x44, 0x42, 0x40, 0x3e, 0x3c, 0x3a, 0x38,
     0x36, 0x34, 0x32, 0x30, 0x2e, 0x2c, 0x2a, 0x28, 0x26, 0x24, 0x22, 0x20,
     0x1e, 0x1c, 0x1a, 0x18, 0x16, 0x14, 0x12, 0x10, 0xe,  0xc,  0xa,  0x8,
     0x6,  0x4,  0x2,  0x0}};

double sample_sin(double t, double amplitude, double freq, double phase) {
    t = ((int)((t * freq) + phase));
    return WaveFormTable[0][(unsigned char)t] * amplitude;
}

double sample_tri(double t, double amplitude, double freq) {
    t = ((int)(t * freq));
    return WaveFormTable[1][(unsigned char)t] * amplitude;
}

int main() {
    printf("%s \n", "Hellow");

    double amplitude_sin = 1;
    double amplitude_tri = 1;

    double phase1 = 0;  // mellan 0 och 112
    double phase2 = Num_Samples / 3;
    double phase3 = Num_Samples * 2 / 3;

    double freq_sin = 0.1;  // mellan 0 och 1 (% av topphastighet)
    double freq_tri = 1;    // mellan 0 och 1

    double sine1;
    double sine2;
    double sine3;
    double tri;

    FILE *s1 = fopen("data/sin1.txt", "w");
    FILE *s2 = fopen("data/sin2.txt", "w");
    FILE *s3 = fopen("data/sin3.txt", "w");

    FILE *t1 = fopen("data/tri1.txt", "w");

    FILE *pwm1 = fopen("data/pwm1.txt", "w");
    FILE *pwm2 = fopen("data/pwm2.txt", "w");
    FILE *pwm3 = fopen("data/pwm3.txt", "w");

    for (double i = 0; i < 8000; i++) {
        sine1 = sample_sin(i, amplitude_sin, freq_sin, phase1);
        fprintf(s1, "%lf \n", sine1);
        sine2 = sample_sin(i, amplitude_sin, freq_sin, phase2);
        fprintf(s2, "%lf \n", sine2);
        sine3 = sample_sin(i, amplitude_sin, freq_sin, phase3);
        fprintf(s3, "%lf \n", sine3);

        tri = sample_tri(i, amplitude_tri, freq_tri);
        fprintf(t1, "%lf \n", tri);

        if (sine1 > tri) {
            fprintf(pwm1, "%lf \n", (double)1);
        } else {
            fprintf(pwm1, "%lf \n", (double)0);
        }

        if (sine2 > tri) {
            fprintf(pwm2, "%lf \n", (double)1);
        } else {
            fprintf(pwm2, "%lf \n", (double)0);
        }

        if (sine3 > tri) {
            fprintf(pwm3, "%lf \n", (double)1);
        } else {
            fprintf(pwm3, "%lf \n", (double)0);
        }
    }

    return 0;
}